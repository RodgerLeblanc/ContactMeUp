@page "/contacts"

@inject ContactService ContactService
@inject NavigationManager  NavigationManager
@inject IModalService ModalService

<h1>Contacts</h1>

<p>Liste des contacts enregistrés</p>

@if (contacts == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th></th>
                <th>Date</th>
                <th>Nom</th>
                <th>SMS</th>
                <th>Courriel</th>
                <th>Autre</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contact in contacts)
            {
                <tr>
                    <td><a href="javascript: void(0)" alt="Supprimer"><span class="oi oi-circle-x" @onclick="@(_ => ConfirmDelete(contact))"></span></a></td>
                    <td><a href=@($"/contacts/{contact.RowKey}") alt="Modifier"><span class="oi oi-pencil"></span></a></td>
                    <td>@contact.Timestamp.DateTime.ToString("dd/MM/yy hh:mm")</td>
                    <td>@contact.Name</td>
                    <td>@contact.SMS</td>
                    <td>@contact.Email</td>
                    <td>@contact.Other</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private IList<Contact> contacts;

    protected override async Task OnInitializedAsync()
    {
        contacts = await ContactService.GetAsync();
    }

    private void ConfirmDelete(Contact contact)
    {
        ModalService.OnClose += ModalClosed;

        ModalParameters parameters = new ModalParameters();
        parameters.Add("ToDelete", contact);

        ModalService.Show<DeleteContactConfirmation>("Supprimer le contact?", parameters);
    }

    async void ModalClosed(ModalResult modalResult)
    {
        ModalService.OnClose -= ModalClosed;

        if (!modalResult.Cancelled)
        {
            contacts = await ContactService.GetAsync();
            StateHasChanged();
        }
    }
}
